
##############################
#  _
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  <
#  \__|_| |_| |_|\__,_/_/\_\
#
#############################
#
#
#
############################################################################
# Copy + Paste
############################################################################
# Copy-paste integration
set-option -g default-command "reattach-to-user-namespace -l zsh"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Bind ']' to use pbpaste
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"


############################################################################
# Reset Prefix
############################################################################
#set -g prefix C-a
#bind-key a send-prefix # for nested tmux sessions

############################################################################
# Global options
############################################################################
set-option -g default-shell /bin/zsh

# large history
set-option -g history-limit 10000

# colors
setw -g mode-bg blue
set-option -g default-terminal "xterm-256color" #"xterm-256color" # "screen-256color"
set-option -g pane-active-border-fg green

# utf8 support
set-window-option -g utf8 on


# basic settings
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on
set-window-option -g window-status-current-fg white
setw -g window-status-current-attr reverse

# Automatically set window title
#setw -g automatic-rename

# use mouse # More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
# setw -g mode-mouse on
#setw -g mouse-resize-pane on
#set -g mouse-select-window on
# set -g mouse-select-pane on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# vi movement keys
# set-option -g status-keys vi

############################################################################
# Status Bar
############################################################################
source /Users/bresmith/.vim/bundle/powerline/powerline/bindings/tmux/powerline.conf



############################################################################
# Unbindings
############################################################################
#unbind [ # copy mode bound to escape key
unbind j
#unbind C-b # unbind default leader key
#unbind '"' # unbind horizontal split
#unbind %   # unbind vertical split


############################################################################
# Bindings
############################################################################
# reload tmux conf
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
bind-key e run-shell "vi ~/.tmux.conf"

#bind Escape copy-mode

# new split in current pane (horizontal / vertical)
bind-key - split-window -v # split pane horizontally
bind-key \ split-window -h # split pane vertically

# list panes
bind-key Space list-panes

# break-pane
bind-key Enter break-pane

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"
bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

#previous window
bind-key -n C-up prev
bind-key -n C-left prev

#next window
bind-key -n C-right next
bind-key -n C-down next

############################################################################
# windows
############################################################################
set-window-option -g window-status-current-bg red
bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session,
# even if both clients are looking at different windows.
# It seems that in this particular case, Screen has the better default
# where a window is only constrained in size if a smaller client
# is actively looking at it.
setw -g aggressive-resize on

############################################################################
# panes
############################################################################
#nmap <silent> [1;3A :wincmd k<CR>
#nmap <silent> :wincmd j<CR>
#nmap <silent>:wincmd h<CR>
#nmap <silent> [1;3C :wincmd l<CR>

# smart pane switching with awareness of vim splits
bind -n M-left  run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n M-down run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n M-up run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n M-right run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n M-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"
bind -n M-x confirm-before -p "kill-pane #P? (y/n)" kill-pane


# quick pane resizing with vim awareness
bind-key -n M-S-left run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys ':vertical resize -5' Enter) || tmux resize-pane -L 5"
bind-key -n M-S-down run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-w +5) || tmux resize-pane -D 5"
bind-key -n M-S-up run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-w -5) || tmux resize-pane -U 5"
bind-key -n M-S-right run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys ':vertical resize +5' Enter) || tmux resize-pane -R 5"

bind-key -n C-left run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys ':tabp' Enter) || tmux prev"
bind-key -n C-right run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys ':tabn' Enter) || tmux next"


# use vim motion keys while in copy mode
setw -g mode-keys vi

############################################################################
# layouts
############################################################################
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window


# focus on first window
# select-window -t 0

#############################################################################
# PLUGINS
#############################################################################
set -g @tpm_plugins '		\
   tmux-plugins/tpm		\
   tmux-plugins/tmux-sensible  	\
   tmux-plugins/tmux-yank       \
   tmux-plugins/tmux-open       \
'
   # initialize TMUX plugin manager
   run-shell '~/.tmux/plugins/tpm/tpm'
